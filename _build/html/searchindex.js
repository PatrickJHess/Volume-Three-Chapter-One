Search.setIndex({"alltitles": {"<br>Figure 2 shows a screenshot of the Treasury page and its data tool. A selected time period determines a URL to the Download CSV link.  In our example the year is set to 2025 and the month is September. As we will see below, the URL includes the sting of a four digit year and a two digit month (\u2018202509\u2019).": [[0, "figure-2-shows-a-screenshot-of-the-treasury-page-and-its-data-tool-a-selected-time-period-determines-a-url-to-the-download-csv-link-in-our-example-the-year-is-set-to-2025-and-the-month-is-september-as-we-will-see-below-the-url-includes-the-sting-of-a-four-digit-year-and-a-two-digit-month-202509"]], "<font color='blue'> Application: Downloading Treasury Data</font>": [[0, "application-downloading-treasury-data"]], "<font color='blue'>Access September 2024 T-Bill Data from the US Treasury and display the values for September 12, 2024.": [[0, "access-september-2024-t-bill-data-from-the-us-treasury-and-display-the-values-for-september-12-2024"]], "<font color='blue'>Application: Create a DataFrame from a Two-Dimensional Array</font>": [[0, "application-create-a-dataframe-from-a-two-dimensional-array"]], "<font color='blue'>Application: Create a NumPy Array</font>": [[0, "application-create-a-numpy-array"]], "<font color='blue'>Application: Manipulate a Two-Dimensional Array</font>": [[0, "application-manipulate-a-two-dimensional-array"]], "<font color='blue'>Create a DataFrame with the two-dimensional array</font> <font color='green'>pv_rates</font>.</font>": [[0, "create-a-dataframe-with-the-two-dimensional-array-pv-rates"]], "<font color='blue'>Create a NumPy array of the present value factors for the rates of <font color='green'>interest_rates</font></font>": [[0, "create-a-numpy-array-of-the-present-value-factors-for-the-rates-of-interest-rates"]], "<font color='blue'>Create a two-dimensional array by raising the interest-rate row to Euler\u2019s number and multiplying the results by the present value factors.</font>": [[0, "create-a-two-dimensional-array-by-raising-the-interest-rate-row-to-euler-s-number-and-multiplying-the-results-by-the-present-value-factors"]], "<font color='blue'>Exercise:  Using the September 12, 2024, data</font>": [[0, "exercise-using-the-september-12-2024-data"]], "A Pandas DataFrame organizes data into rows and columns, much like a spreadsheet or a NumPy array. It can be created from a two-dimensional array, such as <font color='green'>pv-rates</font>. The simplest DataFrames automatically assign row and column index values, a more functional approach allows for explicit naming of both. In this simple example, the <font color='green'>DataFrame()</font> method of Pandas uses three arrays as arguments, generating a row for each array.": [[0, "a-pandas-dataframe-organizes-data-into-rows-and-columns-much-like-a-spreadsheet-or-a-numpy-array-it-can-be-created-from-a-two-dimensional-array-such-as-pv-rates-the-simplest-dataframes-automatically-assign-row-and-column-index-values-a-more-functional-approach-allows-for-explicit-naming-of-both-in-this-simple-example-the-dataframe-method-of-pandas-uses-three-arrays-as-arguments-generating-a-row-for-each-array"]], "A Road Map": [[0, "a-road-map"]], "Accessing Rows of a Pandas DataFrame": [[0, "accessing-rows-of-a-pandas-dataframe"]], "Accessing The Data": [[0, "accessing-the-data"]], "Accessing the T-Bill Data Directly from the US Department of the Treasury (Treasury)": [[0, "accessing-the-t-bill-data-directly-from-the-us-department-of-the-treasury-treasury"]], "Adding a Custom Module and Importing Functions": [[0, "adding-a-custom-module-and-importing-functions"]], "Although it might seem obvious that the locked-in rate of return and the forward rate are equal, this result is significant. Imagine an investor who intends to invest at the future date t for \\Delta t periods. The investor can": [[0, "although-it-might-seem-obvious-that-the-locked-in-rate-of-return-and-the-forward-rate-are-equal-this-result-is-significant-imagine-an-investor-who-intends-to-invest-at-the-future-date-t-for-delta-t-periods-the-investor-can"]], "An Excel workbook is accessed from Dropbox. The URL is provided by DropBox.The Pandas method <font color='green'>read_excel()</font> is used to read and assign the data to <font color='green'>Tbill_data_excel</font>.  The <font color='green'>Date</font> column is assigned as the index.  Notice here that <font color='green'>try</font> and <font color='green'>except</font> are used to alert us if the file is not available.": [[0, "an-excel-workbook-is-accessed-from-dropbox-the-url-is-provided-by-dropbox-the-pandas-method-read-excel-is-used-to-read-and-assign-the-data-to-tbill-data-excel-the-date-column-is-assigned-as-the-index-notice-here-that-try-and-except-are-used-to-alert-us-if-the-file-is-not-available"]], "And a coupon equivalent of:": [[0, "and-a-coupon-equivalent-of"]], "And the value of the fixed-coupon bond is composed of two components equaling:": [[0, "and-the-value-of-the-fixed-coupon-bond-is-composed-of-two-components-equaling"]], "Arbitrage and the Value of the Bond": [[0, "arbitrage-and-the-value-of-the-bond"]], "As noted earlier, the price of a bill with a $100 par value is:": [[0, "as-noted-earlier-the-price-of-a-bill-with-a-100-par-value-is"]], "Bank Discounts & Coupon Equivalent Yields": [[0, "bank-discounts-coupon-equivalent-yields"]], "Basic Bond Concepts and the Term Structure of Interest Rates": [[2, null]], "Calculating Bond Prices With Bank Discounts": [[0, "calculating-bond-prices-with-bank-discounts"]], "Calculating The Term Structure": [[0, "calculating-the-term-structure"]], "Calculating the Term Structure of Interest Rates with Treasury Bills": [[0, "calculating-the-term-structure-of-interest-rates-with-treasury-bills"]], "Changing The URL And Using The Pandas Method <font color='green'>read_csv</font>": [[0, "changing-the-url-and-using-the-pandas-method-read-csv"]], "Chapter One Notebook Of Basic Concepts Of Fixed Income": [[0, null]], "Chapter One uses the libraries Pandas and NumPy. The basic usage of these libraries are<br> discussed in two separate notebooks.  The notebook A Quick Introduction To Pandas<br> reviews some basic concepts of Pandas.  The notebook A Quick Introduction To NumPy<br> does the same for NumPy.": [[0, "chapter-one-uses-the-libraries-pandas-and-numpy-the-basic-usage-of-these-libraries-are-discussed-in-two-separate-notebooks-the-notebook-a-quick-introduction-to-pandas-reviews-some-basic-concepts-of-pandas-the-notebook-a-quick-introduction-to-numpy-does-the-same-for-numpy"]], "Chapter Two of Basic Financial and Python Concepts asserted that the value of an asset with certain cash flows equals the present value of its cash flows, as shown in the following equation:": [[0, "chapter-two-of-basic-financial-and-python-concepts-asserted-that-the-value-of-an-asset-with-certain-cash-flows-equals-the-present-value-of-its-cash-flows-as-shown-in-the-following-equation"]], "Continuous and Discrete Compounding": [[0, "continuous-and-discrete-compounding"]], "Coupon Bonds and Zero-Coupon Bonds": [[0, "coupon-bonds-and-zero-coupon-bonds"]], "Creating A Pandas DataFrame From NumPy Arrays": [[0, "creating-a-pandas-dataframe-from-numpy-arrays"]], "Creating the DataFrame Tbill_data_excel From An Excel Workbook": [[0, "creating-the-dataframe-tbill-data-excel-from-an-excel-workbook"]], "Each coupon-bond cash flow is equivalent to an investment in a zero-coupon bond. As such, we can replicate a coupon bond with a sequence of zero-coupon bonds: The number of zero-coupon bonds with a maturity of t equals the coupon bond\u2019s cash flow at t divided by the zero-coupon bond\u2019s principal. For example, consider a \\$40 coupon that is paid every six months before maturity. This coupon is valued with a sequence of 0.04 zero-coupon bonds, with a \\$1,000 principal and maturities matching the coupon payment dates. The coupon bond\u2019s payment at maturity equals 1.040 zero-coupon bonds, with a \\$1,000 principal and the same maturity as the coupon bond.": [[0, "each-coupon-bond-cash-flow-is-equivalent-to-an-investment-in-a-zero-coupon-bond-as-such-we-can-replicate-a-coupon-bond-with-a-sequence-of-zero-coupon-bonds-the-number-of-zero-coupon-bonds-with-a-maturity-of-t-equals-the-coupon-bond-s-cash-flow-at-t-divided-by-the-zero-coupon-bond-s-principal-for-example-consider-a-40-coupon-that-is-paid-every-six-months-before-maturity-this-coupon-is-valued-with-a-sequence-of-0-04-zero-coupon-bonds-with-a-1-000-principal-and-maturities-matching-the-coupon-payment-dates-the-coupon-bond-s-payment-at-maturity-equals-1-040-zero-coupon-bonds-with-a-1-000-principal-and-the-same-maturity-as-the-coupon-bond"]], "Finally, discretely compounded rates can be derived from continuously compounded rates by dividing both sides by the compounding frequency, or": [[0, "finally-discretely-compounded-rates-can-be-derived-from-continuously-compounded-rates-by-dividing-both-sides-by-the-compounding-frequency-or"]], "Finally, the graph is generated and saved with <font color='green'>one_y_axis()</font> (see Figure 1).": [[0, "finally-the-graph-is-generated-and-saved-with-one-y-axis-see-figure-1"]], "Finally, the graph is generated and saved with <font color='green'>one_y_axis()</font> (see Figure 3).": [[0, "finally-the-graph-is-generated-and-saved-with-one-y-axis-see-figure-3"]], "For instances in which rate conversion is necessary, the above methods are useful knowledge; for this chapter, however, we\u2019ll focus on continuously compounded rates.": [[0, "for-instances-in-which-rate-conversion-is-necessary-the-above-methods-are-useful-knowledge-for-this-chapter-however-we-ll-focus-on-continuously-compounded-rates"]], "For mathematical and computational convenience, our discussion of fixed income and bond pricing will use continuously compounded interest rates. At times, it\u2019s appropriate to quote interest rates as discretely compounded rates. To that end, this short aside demonstrates the conversion between continuously and discretely compounded rates.": [[0, "for-mathematical-and-computational-convenience-our-discussion-of-fixed-income-and-bond-pricing-will-use-continuously-compounded-interest-rates-at-times-it-s-appropriate-to-quote-interest-rates-as-discretely-compounded-rates-to-that-end-this-short-aside-demonstrates-the-conversion-between-continuously-and-discretely-compounded-rates"]], "For zero-coupon bonds with a principal of \\$1, the calculation of one plus the forward rate between t and t+\\Delta t  is:": [[0, "for-zero-coupon-bonds-with-a-principal-of-1-the-calculation-of-one-plus-the-forward-rate-between-t-and-t-delta-t-is"]], "Forward Rates": [[0, "forward-rates"], [0, "id4"]], "Forward Rates Of Interest": [[0, "forward-rates-of-interest"]], "Functions Imported By the Volume Basic Concepts Of Fixed Income": [[1, null]], "Further, a coupon bond\u2019s value is the sum of all the zero-coupon bond values needed to replicate that bond\u2019s cash flows. If the coupon bond and the zero-coupon bonds have the same principal, and all the coupon payments of the coupon bond are equal, the value of the coupon bond is:": [[0, "further-a-coupon-bond-s-value-is-the-sum-of-all-the-zero-coupon-bond-values-needed-to-replicate-that-bond-s-cash-flows-if-the-coupon-bond-and-the-zero-coupon-bonds-have-the-same-principal-and-all-the-coupon-payments-of-the-coupon-bond-are-equal-the-value-of-the-coupon-bond-is"]], "Getting Treasury Bill Data": [[0, "getting-treasury-bill-data"]], "Going from Bankers Discounts to Zero Prices": [[0, "going-from-bankers-discounts-to-zero-prices"], [0, "id2"]], "Graphing the Spot and Forward Rates for September 15, 2022": [[0, "graphing-the-spot-and-forward-rates-for-september-15-2022"]], "Graphing the Spot and Forward Rates for September 30, 2025": [[0, "graphing-the-spot-and-forward-rates-for-september-30-2025"]], "Graphing the Term Structure": [[0, "graphing-the-term-structure"], [0, "id6"]], "Having the bank discount in NumPy arrays will allow for an easy conversion to bill prices. We can convert <font color='green'>df_bankers_discount</font> into a two-dimensional NumPy array <font color='green'>bankers_discount</font> with the Pandas method <font color='green'>to_numpy()</font>. The first five rows of the array are shown below.^{13}": [[0, "having-the-bank-discount-in-numpy-arrays-will-allow-for-an-easy-conversion-to-bill-prices-we-can-convert-df-bankers-discount-into-a-two-dimensional-numpy-array-bankers-discount-with-the-pandas-method-to-numpy-the-first-five-rows-of-the-array-are-shown-below-13"]], "If a zero-coupon bond pays \\$1 in six months and has a price of $0.9753, the continuously-compounded annual rate of interest is:": [[0, "if-a-zero-coupon-bond-pays-1-in-six-months-and-has-a-price-of-0-9753-the-continuously-compounded-annual-rate-of-interest-is"]], "If the price of the coupon bond exceeds the sum of the zero-coupon bond prices, the coupon bond can be shorted.^{1} The zero-coupon bonds can then be purchased with the proceeds, leaving the investor with identical cash flows for a lower price. Consider if the inequality is reversed:": [[0, "if-the-price-of-the-coupon-bond-exceeds-the-sum-of-the-zero-coupon-bond-prices-the-coupon-bond-can-be-shorted-1-the-zero-coupon-bonds-can-then-be-purchased-with-the-proceeds-leaving-the-investor-with-identical-cash-flows-for-a-lower-price-consider-if-the-inequality-is-reversed"]], "If you input values, the function corrects errors that prevent the URL from being usable.": [[0, "if-you-input-values-the-function-corrects-errors-that-prevent-the-url-from-being-usable"]], "Importing Libraries And Functions": [[0, "importing-libraries-and-functions"]], "In a state of equilibrium, the prices of zero-coupon bonds ensure that investors are indifferent to either securing a spot rate immediately or deferring investment until a future, unknown spot rate. The choice between rolling over a short-term investment and making a long-term one essentially hinges on expectations regarding future interest rates. Similar to the odds in a sports wager, the forward rate represents a fair-bet value for these future unknown spot rates, thereby making investors indifferent to the duration of their investment. Although forward rates forecast future spot rates, the forecasts may not be the expected values.^{8}": [[0, "in-a-state-of-equilibrium-the-prices-of-zero-coupon-bonds-ensure-that-investors-are-indifferent-to-either-securing-a-spot-rate-immediately-or-deferring-investment-until-a-future-unknown-spot-rate-the-choice-between-rolling-over-a-short-term-investment-and-making-a-long-term-one-essentially-hinges-on-expectations-regarding-future-interest-rates-similar-to-the-odds-in-a-sports-wager-the-forward-rate-represents-a-fair-bet-value-for-these-future-unknown-spot-rates-thereby-making-investors-indifferent-to-the-duration-of-their-investment-although-forward-rates-forecast-future-spot-rates-the-forecasts-may-not-be-the-expected-values-8"]], "In finance, equating value with present value is ubiquitous and seems unworthy of much thought. It is, however, a powerful statement that value depends upon the ability to replicate an asset with other assets. Namely, if an asset\u2019s cash flow dates and amounts can be replicated by another asset or combinations of assets, the values must be equal. You might call this idea the law of one price\u2014a concept that is key in all pricing models.": [[0, "in-finance-equating-value-with-present-value-is-ubiquitous-and-seems-unworthy-of-much-thought-it-is-however-a-powerful-statement-that-value-depends-upon-the-ability-to-replicate-an-asset-with-other-assets-namely-if-an-asset-s-cash-flow-dates-and-amounts-can-be-replicated-by-another-asset-or-combinations-of-assets-the-values-must-be-equal-you-might-call-this-idea-the-law-of-one-pricea-concept-that-is-key-in-all-pricing-models"]], "In order to price any bond, it\u2019s necessary to know the present value of payments at the relevant dates. If the zero-coupon bond values are known for the relevant dates, the present value of each date can be determined. To do so, divide the value of the zero-coupon bond by its principal, as shown below:": [[0, "in-order-to-price-any-bond-it-s-necessary-to-know-the-present-value-of-payments-at-the-relevant-dates-if-the-zero-coupon-bond-values-are-known-for-the-relevant-dates-the-present-value-of-each-date-can-be-determined-to-do-so-divide-the-value-of-the-zero-coupon-bond-by-its-principal-as-shown-below"]], "In the below code, rows are converted to columns by using the <font color='green'>transpose()</font> method on our earlier DataFrame, <font color='green'>simple_example</font>. This method changes the rows into columns.^{6} The transposed result is then assigned to <font color='green'>rows_to_columns</font>, and the columns are then assigned the elements of a list (<font color='green'>[\u2018Rates\u2019, \u2018Future Value\u2019, \u2018Present Value\u2019]</font>).  Transposing the DataFrame makes <font color='green'>\u2019Rates\u2019</font>, <font color='green'>\u2019Future Value\u2019</font>, and <font color='green'>\u2019Present Value\u2019</font> the variables and the rows the observations of the variables.": [[0, "in-the-below-code-rows-are-converted-to-columns-by-using-the-transpose-method-on-our-earlier-dataframe-simple-example-this-method-changes-the-rows-into-columns-6-the-transposed-result-is-then-assigned-to-rows-to-columns-and-the-columns-are-then-assigned-the-elements-of-a-list-rates-future-value-present-value-transposing-the-dataframe-makes-rates-future-value-and-present-value-the-variables-and-the-rows-the-observations-of-the-variables"]], "In the following code, the x-axis is set at the five maturities of the bills in months. Forward and spot rates are calculated for the month of September 2022, and the data for September 15, 2022, is plotted.": [[0, "in-the-following-code-the-x-axis-is-set-at-the-five-maturities-of-the-bills-in-months-forward-and-spot-rates-are-calculated-for-the-month-of-september-2022-and-the-data-for-september-15-2022-is-plotted"]], "In this case, the zero-coupon bonds can be shorted, and the proceeds can be used to buy the coupon bond. This ability to recreate cash flows allows for arbitrage between zero-coupon and coupon bonds; as a result, the coupon bond prices equal the costs of the zero-coupon bonds used to recreate their cash flows. It is the law of one price in action. Whatever the bond prices might have been in theory does not matter. Those prices were ideas\u2014the market value is a fact.": [[0, "in-this-case-the-zero-coupon-bonds-can-be-shorted-and-the-proceeds-can-be-used-to-buy-the-coupon-bond-this-ability-to-recreate-cash-flows-allows-for-arbitrage-between-zero-coupon-and-coupon-bonds-as-a-result-the-coupon-bond-prices-equal-the-costs-of-the-zero-coupon-bonds-used-to-recreate-their-cash-flows-it-is-the-law-of-one-price-in-action-whatever-the-bond-prices-might-have-been-in-theory-does-not-matter-those-prices-were-ideasthe-market-value-is-a-fact"]], "In this chapter, we\u2019ll explore bond calculations and interest through the lens of NumPy And Python DataFrames. Powerful tools for engaging bond data. Using Treasury bill data, we\u2019ll learn how to create DataFrames and NumPy arrays from CSV files, Excel workbooks. All our data is accessed with external URLs. Our calculations result in the term structure of interest rates on two different data. The chapter concludes with an exercise in which you practice calculating and graphin the term structure of interest rates on your own.": [[0, "in-this-chapter-we-ll-explore-bond-calculations-and-interest-through-the-lens-of-numpy-and-python-dataframes-powerful-tools-for-engaging-bond-data-using-treasury-bill-data-we-ll-learn-how-to-create-dataframes-and-numpy-arrays-from-csv-files-excel-workbooks-all-our-data-is-accessed-with-external-urls-our-calculations-result-in-the-term-structure-of-interest-rates-on-two-different-data-the-chapter-concludes-with-an-exercise-in-which-you-practice-calculating-and-graphin-the-term-structure-of-interest-rates-on-your-own"]], "Introduction to Bond Pricing": [[0, "introduction-to-bond-pricing"]], "It\u2019s good practice to import all required libraries and modules in the first code cell of a notebook. A practice followed here unless attention is being drawn to a new function or module. If a library is already installed, it\u2019s imported to the notebook.  If a library is not installed, it is installed  and then imported.": [[0, "it-s-good-practice-to-import-all-required-libraries-and-modules-in-the-first-code-cell-of-a-notebook-a-practice-followed-here-unless-attention-is-being-drawn-to-a-new-function-or-module-if-a-library-is-already-installed-it-s-imported-to-the-notebook-if-a-library-is-not-installed-it-is-installed-and-then-imported"]], "Making Rows into Columns and Labeling the Columns": [[0, "making-rows-into-columns-and-labeling-the-columns"]], "Measuring the term structure is a key financial skill. The term structure of interest rates is a critical indicator of financial market conditions. Its explanation, along with the concepts necessary for its calculation, represents the most significant aspect of this example. The relation between past, present,and future market conditions are expressed by measuring the term structure.": [[0, "measuring-the-term-structure-is-a-key-financial-skill-the-term-structure-of-interest-rates-is-a-critical-indicator-of-financial-market-conditions-its-explanation-along-with-the-concepts-necessary-for-its-calculation-represents-the-most-significant-aspect-of-this-example-the-relation-between-past-present-and-future-market-conditions-are-expressed-by-measuring-the-term-structure"]], "Most bonds, but not all, pay fixed coupons in each period and principal at their maturity. The values of coupon bonds are calculated as:": [[0, "most-bonds-but-not-all-pay-fixed-coupons-in-each-period-and-principal-at-their-maturity-the-values-of-coupon-bonds-are-calculated-as"]], "Now that we\u2019ve created an array and assigned it to <font color='green'>interest_rates</font>, we can perform calculations on that array. NumPy calculates array elements individually. For instance, the <font color='green'>exp()</font> method used below raises each element of <font color='green'>interest_rates</font> to Euler\u2019s number, e. This approach is faster and more convenient than iterating through the rates.": [[0, "now-that-we-ve-created-an-array-and-assigned-it-to-interest-rates-we-can-perform-calculations-on-that-array-numpy-calculates-array-elements-individually-for-instance-the-exp-method-used-below-raises-each-element-of-interest-rates-to-euler-s-number-e-this-approach-is-faster-and-more-convenient-than-iterating-through-the-rates"]], "Now that we\u2019ve imported our main modules and libraries, we\u2019ll access a custom module for our more specific functions. In the below code, the custom module <font color='green'>module_basic_concepts_fixed_income</font> contains functions utilized by this notebook and others in the volume Basic Concepts of Fixed Income. This module is accessed from Dropbox using <font color='green'>requests.get()</font>.": [[0, "now-that-we-ve-imported-our-main-modules-and-libraries-we-ll-access-a-custom-module-for-our-more-specific-functions-in-the-below-code-the-custom-module-module-basic-concepts-fixed-income-contains-functions-utilized-by-this-notebook-and-others-in-the-volume-basic-concepts-of-fixed-income-this-module-is-accessed-from-dropbox-using-requests-get"]], "NumPy Arrays": [[0, "numpy-arrays"]], "NumPy Calculations": [[0, "numpy-calculations"]], "NumPy and Pandas are powerful tools that greatly simplify the manipulation and calculation of extensive and complex financial data. We will explore their application in calculating the term structure of interest rates on various dates, a process that requires accessing large datasets and performing numerous calculations. These libraries are essential for this task.": [[0, "numpy-and-pandas-are-powerful-tools-that-greatly-simplify-the-manipulation-and-calculation-of-extensive-and-complex-financial-data-we-will-explore-their-application-in-calculating-the-term-structure-of-interest-rates-on-various-dates-a-process-that-requires-accessing-large-datasets-and-performing-numerous-calculations-these-libraries-are-essential-for-this-task"]], "NumPy and Pandas, though not standard Python libraries, are pre-installed in Colab and often in Jupyter notebooks. To ensure availability, a <font color='green'>try </font> and <font color='green'>except </font> block is used for importing them. If the import fails, the libraries are then installed using <font color='green'>pip </font>. The exclamation mark indicates that <font color='green'>pip </font> is running on the machine\u2019s console rather than within the notebook. Upon successful import, NumPy and Pandas are aliased as <font color='green'>np</font> and <font color='green'>pd </font>.^{2}": [[0, "numpy-and-pandas-though-not-standard-python-libraries-are-pre-installed-in-colab-and-often-in-jupyter-notebooks-to-ensure-availability-a-try-and-except-block-is-used-for-importing-them-if-the-import-fails-the-libraries-are-then-installed-using-pip-the-exclamation-mark-indicates-that-pip-is-running-on-the-machine-s-console-rather-than-within-the-notebook-upon-successful-import-numpy-and-pandas-are-aliased-as-np-and-pd-2"]], "Once the DataFrame has been transposed, the next step is to make the <font color='green'>Rates</font> column the index.  You might wonder why it makes sense?  The reason is that the values of <font color='green'>Rates</font> determine the values of the columns <font color='green'>Future Value</font> and <font color='green'>Present Value</font>.  This change isn\u2019t necessary, but it draws our eye to a natural connection.  Instead of an index that only points to a row number, the new index points to the rate that causes the future and present values.": [[0, "once-the-dataframe-has-been-transposed-the-next-step-is-to-make-the-rates-column-the-index-you-might-wonder-why-it-makes-sense-the-reason-is-that-the-values-of-rates-determine-the-values-of-the-columns-future-value-and-present-value-this-change-isn-t-necessary-but-it-draws-our-eye-to-a-natural-connection-instead-of-an-index-that-only-points-to-a-row-number-the-new-index-points-to-the-rate-that-causes-the-future-and-present-values"]], "Our now-complete code is shown in the cell below.": [[0, "our-now-complete-code-is-shown-in-the-cell-below"]], "Preparing The Notebook": [[0, "preparing-the-notebook"]], "Preparing the Notebook": [[0, "id1"], [0, "id5"]], "Python for Bonds and Interest Rates": [[0, "python-for-bonds-and-interest-rates"]], "Python, Pandas, NumPy And Financial Insights": [[0, "python-pandas-numpy-and-financial-insights"]], "Recall that the spot rates are the annualized rates calculated from the TiBill data. Spot rates are equal to:": [[0, "recall-that-the-spot-rates-are-the-annualized-rates-calculated-from-the-tibill-data-spot-rates-are-equal-to"]], "Series names, labels, and markers are then assigned.": [[0, "series-names-labels-and-markers-are-then-assigned"], [0, "id8"]], "Since they lack index columns, the correct rows of the NumPy arrays <font color='green'>spot_rates</font> and <font color='green'>forward_rates</font> cannot be determined from the value of <font color='green'>string_date</font>. Because the rows of the arrays correspond to the rows of the DataFrame, the correct row is determined with the Pandas method <font color='green'>get_indexer()</font>. The method returns an array with index values corresponding to the argument. The spot- and forward-rate rows for September 15, 2022, are then multiplied by 100 and assigned to the list <font color='green'>data</font>.": [[0, "since-they-lack-index-columns-the-correct-rows-of-the-numpy-arrays-spot-rates-and-forward-rates-cannot-be-determined-from-the-value-of-string-date-because-the-rows-of-the-arrays-correspond-to-the-rows-of-the-dataframe-the-correct-row-is-determined-with-the-pandas-method-get-indexer-the-method-returns-an-array-with-index-values-corresponding-to-the-argument-the-spot-and-forward-rate-rows-for-september-15-2022-are-then-multiplied-by-100-and-assigned-to-the-list-data"]], "Some bonds only repay principal at maturity, or T. Because there are no periodic coupon payments, these bonds are appropriately known as zero-coupon bonds. The values of zero-coupon bonds are calculated as:": [[0, "some-bonds-only-repay-principal-at-maturity-or-t-because-there-are-no-periodic-coupon-payments-these-bonds-are-appropriately-known-as-zero-coupon-bonds-the-values-of-zero-coupon-bonds-are-calculated-as"]], "Spot Rates": [[0, "spot-rates"], [0, "id3"]], "Spot Rates Of Interest": [[0, "spot-rates-of-interest"]], "Summarizing Key Points": [[0, "summarizing-key-points"]], "Suppose that R_c is the continuously compounded annual interest rate for T periods, and R_d is the discretely compounded annual rate for T periods when compounded d times per year. The conversion of continuously and discretely compounded rates requires that the same values are realized in T periods, shown below:": [[0, "suppose-that-r-c-is-the-continuously-compounded-annual-interest-rate-for-t-periods-and-r-d-is-the-discretely-compounded-annual-rate-for-t-periods-when-compounded-d-times-per-year-the-conversion-of-continuously-and-discretely-compounded-rates-requires-that-the-same-values-are-realized-in-t-periods-shown-below"]], "T-Bills are quoted as bank discounts or coupon eequivalent yields. T-Bill prices are 100 less a bank discount annualized with a 360 day year.": [[0, "t-bills-are-quoted-as-bank-discounts-or-coupon-eequivalent-yields-t-bill-prices-are-100-less-a-bank-discount-annualized-with-a-360-day-year"]], "Taking natural logs of the previous equation derives continuously compounded rates from discretely compounded rates:": [[0, "taking-natural-logs-of-the-previous-equation-derives-continuously-compounded-rates-from-discretely-compounded-rates"]], "The <font color='green'>exec()</font> function below executes the Python code returned by <font color='green'>requests.get()</font>. It assigns functions and variables to <font color='green'>sys.module[module_name]</font>. This makes the module available for use in the Notebook.": [[0, "the-exec-function-below-executes-the-python-code-returned-by-requests-get-it-assigns-functions-and-variables-to-sys-module-module-name-this-makes-the-module-available-for-use-in-the-notebook"]], "The <font color='green'>iloc</font> attribute accesses a row by its indexed integer value. In this case the Date \u201c09/15/2022\u201d has an index value of 11. If the integer value is not present, an error is returned. The DataFrame has 21 rows, and so the index value of 45 fails, as shown below.": [[0, "the-iloc-attribute-accesses-a-row-by-its-indexed-integer-value-in-this-case-the-date-09-15-2022-has-an-index-value-of-11-if-the-integer-value-is-not-present-an-error-is-returned-the-dataframe-has-21-rows-and-so-the-index-value-of-45-fails-as-shown-below"]], "The <font color='green'>loc</font> attribute of a DataFrame accesses a row by using its index value. In the below code, the specific value of the index \u201c09/15/2022\u201d is accessed. If the value is not in the index, an error is returned via <font color='green'>except</font>. There are only 30 days in September, so \u201809/31/2022\u2019 fails and the message \u2018Value Not In Index\u2019 is displayed.": [[0, "the-loc-attribute-of-a-dataframe-accesses-a-row-by-using-its-index-value-in-the-below-code-the-specific-value-of-the-index-09-15-2022-is-accessed-if-the-value-is-not-in-the-index-an-error-is-returned-via-except-there-are-only-30-days-in-september-so-09-31-2022-fails-and-the-message-value-not-in-index-is-displayed"]], "The <font color='green'>pv_rates</font> array, a two-dimensional NumPy array (or matrix), is created by combining two one-dimensional arrays: <font color='green'>interest_rates</font> and <font color='green'>pv_factors</font> within the <font color='green'>array()</font> method. To access the rows of this two-dimensional array, use the corresponding row index value. Both the interest rates and present value factors rows are displayed using f-strings that begins with an \u2018f\u2019 and enclose the string and variable in quotes.  The variable must also be encapsulated in curly brackets.": [[0, "the-pv-rates-array-a-two-dimensional-numpy-array-or-matrix-is-created-by-combining-two-one-dimensional-arrays-interest-rates-and-pv-factors-within-the-array-method-to-access-the-rows-of-this-two-dimensional-array-use-the-corresponding-row-index-value-both-the-interest-rates-and-present-value-factors-rows-are-displayed-using-f-strings-that-begins-with-an-f-and-enclose-the-string-and-variable-in-quotes-the-variable-must-also-be-encapsulated-in-curly-brackets"]], "The NumPy library offers efficient numerical procedures that simplify complex calculations.^{3} The fundamental object in this library is the NumPy array. An array is simply a data structure in which elements are arranged and accessed. It can be formed from a single value or from an iterable data type like a list, which holds a series of values.^{4} NumPy must be imported before use; recall that in this Notebook, it was imported and aliased as <font color='green'>np</font> in the first code cell. The <font color='green'>array()</font> method is used to convert variables into NumPy arrays.^{5} The following code creates an array from the list <font color='green'>[3%, 5%, 7%]</font> (lists are stylized with square brackets) and assigns that array to <font color='green'>interest_rates</font>. This is then passed to <font color='green'>display()</font>, which simply displays the contents of <font color='green'>interest_rates</font>.": [[0, "the-numpy-library-offers-efficient-numerical-procedures-that-simplify-complex-calculations-3-the-fundamental-object-in-this-library-is-the-numpy-array-an-array-is-simply-a-data-structure-in-which-elements-are-arranged-and-accessed-it-can-be-formed-from-a-single-value-or-from-an-iterable-data-type-like-a-list-which-holds-a-series-of-values-4-numpy-must-be-imported-before-use-recall-that-in-this-notebook-it-was-imported-and-aliased-as-np-in-the-first-code-cell-the-array-method-is-used-to-convert-variables-into-numpy-arrays-5-the-following-code-creates-an-array-from-the-list-3-5-7-lists-are-stylized-with-square-brackets-and-assigns-that-array-to-interest-rates-this-is-then-passed-to-display-which-simply-displays-the-contents-of-interest-rates"]], "The Pandas magic used to read a an Excel workbook from a URL address is <font color='green'>read_excel</font>.  The arguments of the method are:": [[0, "the-pandas-magic-used-to-read-a-an-excel-workbook-from-a-url-address-is-read-excel-the-arguments-of-the-method-are"]], "The Pandas method <font color='green'>get_indexer()</font> returns the indexed integer values for a specific value of the index as an array. In the below example, an array with a single value is returned. For the Date \u201c09/15/2022\u201d the value 11 is returned. The <font color='green'>get_indexer()</font> method returns \u22121 for missing values, which avoids interrupting the code.": [[0, "the-pandas-method-get-indexer-returns-the-indexed-integer-values-for-a-specific-value-of-the-index-as-an-array-in-the-below-example-an-array-with-a-single-value-is-returned-for-the-date-09-15-2022-the-value-11-is-returned-the-get-indexer-method-returns-1-for-missing-values-which-avoids-interrupting-the-code"]], "The Present Value of a Bond": [[0, "the-present-value-of-a-bond"]], "The Python & Financial Concepts": [[0, "the-python-financial-concepts"]], "The September 2022 T-Bill data had five maturity dates.  The September 2025 data has two additional dates: \u20186 WEEKS\u2019 and \u201817 WEEKS\u2019. In the following code, the x-axis is set at the seven maturities of the bills in months. Forward and spot rates are calculated for the month of September 2025, and the data for September 30, 2025, is plotted.": [[0, "the-september-2022-t-bill-data-had-five-maturity-dates-the-september-2025-data-has-two-additional-dates-6-weeks-and-17-weeks-in-the-following-code-the-x-axis-is-set-at-the-seven-maturities-of-the-bills-in-months-forward-and-spot-rates-are-calculated-for-the-month-of-september-2025-and-the-data-for-september-30-2025-is-plotted"]], "The Simple Example": [[0, "the-simple-example"]], "The Term Structure Of Interest Rates: Putting NumPy And Pandas To Work": [[0, "the-term-structure-of-interest-rates-putting-numpy-and-pandas-to-work"]], "The Term Structure is the relation between the annualized interest rates of zero-coupon bonds, or the spot rate of interest, and the bonds\u2019 maturities. The price of a zero-coupon bond with a maturity of t and a principal of $1 is:": [[0, "the-term-structure-is-the-relation-between-the-annualized-interest-rates-of-zero-coupon-bonds-or-the-spot-rate-of-interest-and-the-bonds-maturities-the-price-of-a-zero-coupon-bond-with-a-maturity-of-t-and-a-principal-of-1-is"]], "The Term Structure of Interest Rates": [[0, "the-term-structure-of-interest-rates"]], "The above line of code warrants a bit of explanation. The <font color='green'>diff()</font> method subtracts the lower indexed value from the higher. In this example, the maturity of four weeks from eight weeks and eight weeks from thirteen and so on. The calculation of forward rates is the reverse (or the negative) value of the <font color='green'>diff()</font> method. The <font color='green'>forward_rates</font> array is assigned the negative value. The <font color='green'>diff()</font> function returns four values (there is no forward rate for the first month). In order to get the spot and forward to line up on the graph, a value is inserted in the forward rate array that is ignored by calculations. The NumPy method <font color='green'>insert()</font> is used to add a column with the value <font color='green'>nan</font> as the first column of the <font color='green'>forward_rates</font> array.^{12}  As you might have guessed, <font color='green'>nan</font> stands for \u2018not a number\u2019.  The arguments of <font color='green'>insert()</font> are the array, position, value, and axis. The rows are <font color='green'>axis 0</font> and the columns are <font color='green'>axis 1</font>. This means that a position of 0 and an axis of 1 inserts the values as the first column.": [[0, "the-above-line-of-code-warrants-a-bit-of-explanation-the-diff-method-subtracts-the-lower-indexed-value-from-the-higher-in-this-example-the-maturity-of-four-weeks-from-eight-weeks-and-eight-weeks-from-thirteen-and-so-on-the-calculation-of-forward-rates-is-the-reverse-or-the-negative-value-of-the-diff-method-the-forward-rates-array-is-assigned-the-negative-value-the-diff-function-returns-four-values-there-is-no-forward-rate-for-the-first-month-in-order-to-get-the-spot-and-forward-to-line-up-on-the-graph-a-value-is-inserted-in-the-forward-rate-array-that-is-ignored-by-calculations-the-numpy-method-insert-is-used-to-add-a-column-with-the-value-nan-as-the-first-column-of-the-forward-rates-array-12-as-you-might-have-guessed-nan-stands-for-not-a-number-the-arguments-of-insert-are-the-array-position-value-and-axis-the-rows-are-axis-0-and-the-columns-are-axis-1-this-means-that-a-position-of-0-and-an-axis-of-1-inserts-the-values-as-the-first-column"]], "The above returns the values that can be used to create a path.": [[0, "the-above-returns-the-values-that-can-be-used-to-create-a-path"]], "The annualized continuously-compounded interest rate of the t-period zero-coupon bond is:": [[0, "the-annualized-continuously-compounded-interest-rate-of-the-t-period-zero-coupon-bond-is"]], "The bank discount of the four-week bill on September 15th is 2.68%, which implies a bill price of:": [[0, "the-bank-discount-of-the-four-week-bill-on-september-15th-is-2-68-which-implies-a-bill-price-of"]], "The column is only added when the if statement is true. The <font color='green'>df_bankers_discount</font> DataFrame is created by including the <font color='green'>desired_column</font> lists as the columns of the <font color='green'>Tbill_data_excel</font> DataFrame, as shown below.": [[0, "the-column-is-only-added-when-the-if-statement-is-true-the-df-bankers-discount-dataframe-is-created-by-including-the-desired-column-lists-as-the-columns-of-the-tbill-data-excel-dataframe-as-shown-below"]], "The columns of the <font color='green'>Tbill_data_excel</font> DataFrame  are either BANK DISCOUNT or COUPON EQUIVALENT. We will construct a NumPy array <font color='green'>bank_discount</font> from the BANK DISCOUNT columns. The list <font color='green'>desired_columns</font> is created with list comprehension from the columns attribute of <font color='green'>Tbill_data_excel</font>. If the string \u2018BANK\u2019 is in the column name, that column name is added to the list <font color='green'>desired_columns.</font>^{11,12}": [[0, "the-columns-of-the-tbill-data-excel-dataframe-are-either-bank-discount-or-coupon-equivalent-we-will-construct-a-numpy-array-bank-discount-from-the-bank-discount-columns-the-list-desired-columns-is-created-with-list-comprehension-from-the-columns-attribute-of-tbill-data-excel-if-the-string-bank-is-in-the-column-name-that-column-name-is-added-to-the-list-desired-columns-11-12"]], "The continuously-compounded annualized forward rate between t and t+\\Delta t is:": [[0, "the-continuously-compounded-annualized-forward-rate-between-t-and-t-delta-t-is"]], "The continuously-compounded annualized locked-in rate of return equals:": [[0, "the-continuously-compounded-annualized-locked-in-rate-of-return-equals"]], "The coupon equivalent is the annualized rate of return that is calculated with the convention of 365 days per year. The calculation is the actual rate of return (the gain on the bill divided by the bill price) multiplied by 365 divided by the maturity of the bill in days. A four-week bill matures in 28 days, and its coupon equivalent is:": [[0, "the-coupon-equivalent-is-the-annualized-rate-of-return-that-is-calculated-with-the-convention-of-365-days-per-year-the-calculation-is-the-actual-rate-of-return-the-gain-on-the-bill-divided-by-the-bill-price-multiplied-by-365-divided-by-the-maturity-of-the-bill-in-days-a-four-week-bill-matures-in-28-days-and-its-coupon-equivalent-is"]], "The csv file is descending order of the dates.  The first row is for September 30^{th} and is displayed with <font color='green'>iloc[0]</font>": [[0, "the-csv-file-is-descending-order-of-the-dates-the-first-row-is-for-september-30-th-and-is-displayed-with-iloc-0"]], "The data is accessed directly from the Treasury as a CSV file, and the code below displays the data row for September 30, 2025. With the exception of the URL value and the <font color='green'>read_csv</font> versus <font color='green'>read_excel</font>, the code is identical to what we used to create <font color='green'>Tbill_data_excel</font>. In this example, the URL points to a Treasury site instead of DropBox.  The URL is copied by right clicking the Download CSV link on the Treasury site.  The URL for a particular year and month is shown below. <font color='green'>data_date</font> is assigned the string \u2018202509\u2019.  You can assign it any year and month after 2022. As of November 3 2025, dates prior to 2022 will be moved to a historical page.": [[0, "the-data-is-accessed-directly-from-the-treasury-as-a-csv-file-and-the-code-below-displays-the-data-row-for-september-30-2025-with-the-exception-of-the-url-value-and-the-read-csv-versus-read-excel-the-code-is-identical-to-what-we-used-to-create-tbill-data-excel-in-this-example-the-url-points-to-a-treasury-site-instead-of-dropbox-the-url-is-copied-by-right-clicking-the-download-csv-link-on-the-treasury-site-the-url-for-a-particular-year-and-month-is-shown-below-data-date-is-assigned-the-string-202509-you-can-assign-it-any-year-and-month-after-2022-as-of-november-3-2025-dates-prior-to-2022-will-be-moved-to-a-historical-page"]], "The earlier discussion of bond pricing described the price of a zero-coupon bond as its maturity value times the present value factor. A NumPy array and a Pandas DataFrame included interest rates, future values, and present value factors.  The same concepts are used to calculate the Term Structure Of Interest Rates (Term Structure).": [[0, "the-earlier-discussion-of-bond-pricing-described-the-price-of-a-zero-coupon-bond-as-its-maturity-value-times-the-present-value-factor-a-numpy-array-and-a-pandas-dataframe-included-interest-rates-future-values-and-present-value-factors-the-same-concepts-are-used-to-calculate-the-term-structure-of-interest-rates-term-structure"]], "The first five values of the <font color='green'>forward_rates</font> array are shown below.": [[0, "the-first-five-values-of-the-forward-rates-array-are-shown-below"]], "The first row of spot_rates and forward_rates correspond to September 30.The spot- and forward-rate rows for September 30, 2025, are then multiplied by 100 and assigned to the list <font color='green'>data</font>.": [[0, "the-first-row-of-spot-rates-and-forward-rates-correspond-to-september-30-the-spot-and-forward-rate-rows-for-september-30-2025-are-then-multiplied-by-100-and-assigned-to-the-list-data"]], "The forward rate of interest represents the additional return gained by extending an investment\u2019s duration\u2014or the extra earnings from investing for two months instead of one. When two bonds offer an identical single payment at maturity, the forward rate between the shorter and longer maturities is determined by the ratio of their respective prices.": [[0, "the-forward-rate-of-interest-represents-the-additional-return-gained-by-extending-an-investment-s-durationor-the-extra-earnings-from-investing-for-two-months-instead-of-one-when-two-bonds-offer-an-identical-single-payment-at-maturity-the-forward-rate-between-the-shorter-and-longer-maturities-is-determined-by-the-ratio-of-their-respective-prices"]], "The forward rates are calculated with differences in the natural logs of zero prices and assigned to the matrix <font color='green'>forward_rates</font> in the below code. The NumPy method <font color='green'>diff()</font> is used to calculate the difference between the zero prices for adjacent maturities. The arguments of <font color='green'>diff()</font> are the array name and the number of lags between differences. The default value for lags between differences is 1.": [[0, "the-forward-rates-are-calculated-with-differences-in-the-natural-logs-of-zero-prices-and-assigned-to-the-matrix-forward-rates-in-the-below-code-the-numpy-method-diff-is-used-to-calculate-the-difference-between-the-zero-prices-for-adjacent-maturities-the-arguments-of-diff-are-the-array-name-and-the-number-of-lags-between-differences-the-default-value-for-lags-between-differences-is-1"]], "The forward rates can be locked in by purchasing the zero-coupon bond that matures in \\large t+\\Delta t periods and for t periods, borrowing P(t+\\Delta t) today at the rate P(t)^{-1}.  At t, the borrowing is repaid, and at t +\\Delta t, the zero-coupon matures and pays one dollar. The borrowing, repayment, and locked-in rate-of-return calculations are shown below.": [[0, "the-forward-rates-can-be-locked-in-by-purchasing-the-zero-coupon-bond-that-matures-in-large-t-delta-t-periods-and-for-t-periods-borrowing-p-t-delta-t-today-at-the-rate-p-t-1-at-t-the-borrowing-is-repaid-and-at-t-delta-t-the-zero-coupon-matures-and-pays-one-dollar-the-borrowing-repayment-and-locked-in-rate-of-return-calculations-are-shown-below"]], "The function <font color='green'>one_y_axis()</font> graphs values on a single y-axis. If the <font color='green'>save_config</font> dictionary has a value assigned to one of its four keys (<font color='green'>Parent</font>, <font color='green'>Folder</font>, <font color='green'>Subfolder</font>,and <font color='green'>File</font>), <font color='green'>one_y_axis()</font> will attempt to save the plot as a PDF.": [[0, "the-function-one-y-axis-graphs-values-on-a-single-y-axis-if-the-save-config-dictionary-has-a-value-assigned-to-one-of-its-four-keys-parent-folder-subfolder-and-file-one-y-axis-will-attempt-to-save-the-plot-as-a-pdf"]], "The function <font color='green'>parent_folder_subfolder</font> that was imported from <font color='green'>module_basic_concepts_fixed_income</font> determines default values and allows you to name the parent directory, the folder, and subfolders. The function\u2019s single argument is set to <font color='green'>True</Font> by default. If <font color='green'>False</font> is not explicitly passed, the function will attempt to return default values for the parent, folder, and subfolder. Conversely, passing <font color='green'>False</font> will prompt the user for these inputs. Note that the function does not direct output to the parent, folder, or subfolder.": [[0, "the-function-parent-folder-subfolder-that-was-imported-from-module-basic-concepts-fixed-income-determines-default-values-and-allows-you-to-name-the-parent-directory-the-folder-and-subfolders-the-function-s-single-argument-is-set-to-true-by-default-if-false-is-not-explicitly-passed-the-function-will-attempt-to-return-default-values-for-the-parent-folder-and-subfolder-conversely-passing-false-will-prompt-the-user-for-these-inputs-note-that-the-function-does-not-direct-output-to-the-parent-folder-or-subfolder"]], "The link to the Daily Treasury Bill Rates on the Treasury Site": [[0, "the-link-to-the-daily-treasury-bill-rates-on-the-treasury-site"]], "The maturity of the bills are 4, 8, 13, 26, and 52 weeks. In the following code, the NumPy array <font color='green'>maturity_days</font> is created by multiplying the number of weeks by seven. The <font color='green'>zero_price_one</font> array is calculated by multiplying <font color='green'>bankers_discount</font> by <font color='green'>maturity_days</font>, annualized with 360 days per year. We then divide by 100 to convert the value to a percentage.": [[0, "the-maturity-of-the-bills-are-4-8-13-26-and-52-weeks-in-the-following-code-the-numpy-array-maturity-days-is-created-by-multiplying-the-number-of-weeks-by-seven-the-zero-price-one-array-is-calculated-by-multiplying-bankers-discount-by-maturity-days-annualized-with-360-days-per-year-we-then-divide-by-100-to-convert-the-value-to-a-percentage"]], "The method <font color='green'>set_index()</font> takes a column name and removes the column from the DataFrame. Pandas has a builtin fail-safe-switch. By default, this change (and others we will encounter later) does not permanently alter the DataFrame.  You might find this a bit strange, but the efficacy avoids mistakes that are difficult to fix. To make the change permanent you assign <font color='green'>inplace</font> switch True.^{7}": [[0, "the-method-set-index-takes-a-column-name-and-removes-the-column-from-the-dataframe-pandas-has-a-builtin-fail-safe-switch-by-default-this-change-and-others-we-will-encounter-later-does-not-permanently-alter-the-dataframe-you-might-find-this-a-bit-strange-but-the-efficacy-avoids-mistakes-that-are-difficult-to-fix-to-make-the-change-permanent-you-assign-inplace-switch-true-7"]], "The plot title is assigned whatever value is assigned to <font color='green'>save_config[\u2018File Name\u2019]</font> (minus the PDF extension).": [[0, "the-plot-title-is-assigned-whatever-value-is-assigned-to-save-config-file-name-minus-the-pdf-extension"], [0, "id7"]], "The price of one dollar or the the zero price is:": [[0, "the-price-of-one-dollar-or-the-the-zero-price-is"]], "The set_index() Method": [[0, "the-set-index-method"]], "The standard Python installation includes the first five imports: (<font color='green'>os, sys</font>, <font color='green'>requests</font>, <font color='green'>types</font>, and <font color='green'>datetime</font>).  <font color='green'>os</font> and <font color='green'>sys</font>  facilitate interaction with the operating system.  The <font color='green'>requests</font> module enables sending and retrieving data from external URL addresses; in this notebook, it\u2019s specifically used to access files from DropBox. The <font color='green'>types</font> module creates the module from the Python code accessed from DropBox.  Finally <font color='green'>datetime</font> allows for the creation and manipulation of date objects.": [[0, "the-standard-python-installation-includes-the-first-five-imports-os-sys-requests-types-and-datetime-os-and-sys-facilitate-interaction-with-the-operating-system-the-requests-module-enables-sending-and-retrieving-data-from-external-url-addresses-in-this-notebook-it-s-specifically-used-to-access-files-from-dropbox-the-types-module-creates-the-module-from-the-python-code-accessed-from-dropbox-finally-datetime-allows-for-the-creation-and-manipulation-of-date-objects"]], "The term structure of interest describes how interest rates vary over time. It is a critical financial metric reflected in the pricing or valuation of almost all assets.": [[0, "the-term-structure-of-interest-describes-how-interest-rates-vary-over-time-it-is-a-critical-financial-metric-reflected-in-the-pricing-or-valuation-of-almost-all-assets"]], "The upper limit of the y-axis is assigned to <font color='green'>upper</font> and calculated from the maximum value of the spot and forward rates. The NumPy method <font color='green'>nanmax()</font> ignores <font color='green'>nan</font> values. The maximum of <font color='green'>nanmax()</font> of spot rates (<font color='green'>data[0]</font>) and forward rates (<font color='green'>data[1]</font>) plus 0.5% are assigned to <font color='green'>upper </font>. The lower limit is set to 0, and the size and colors of the lines are set as 10 inches wide and 6 inches tall (10,6) and red and blue, respectively.": [[0, "the-upper-limit-of-the-y-axis-is-assigned-to-upper-and-calculated-from-the-maximum-value-of-the-spot-and-forward-rates-the-numpy-method-nanmax-ignores-nan-values-the-maximum-of-nanmax-of-spot-rates-data-0-and-forward-rates-data-1-plus-0-5-are-assigned-to-upper-the-lower-limit-is-set-to-0-and-the-size-and-colors-of-the-lines-are-set-as-10-inches-wide-and-6-inches-tall-10-6-and-red-and-blue-respectively"]], "The upper limit of the y-axis is assigned to <font color='green'>upper</font> and calculated from the maximum value of the spot and forward rates. The NumPy method <font color='green'>nanmax()</font> ignores <font color='green'>nan</font> values. The maximum of <font color='green'>nanmax()</font> of spot rates (<font color='green'>data[0]</font>) and forward rates (<font color='green'>data[1]</font>) plus 0.5% are assigned to <font color='green'>upper </font>. The lower limit is set to 0, and the size and colors of the lines are set as 10,6 and red and blue, respectively.": [[0, "the-upper-limit-of-the-y-axis-is-assigned-to-upper-and-calculated-from-the-maximum-value-of-the-spot-and-forward-rates-the-numpy-method-nanmax-ignores-nan-values-the-maximum-of-nanmax-of-spot-rates-data-0-and-forward-rates-data-1-plus-0-5-are-assigned-to-upper-the-lower-limit-is-set-to-0-and-the-size-and-colors-of-the-lines-are-set-as-10-6-and-red-and-blue-respectively"]], "The values returned by <font color='green'>create_path_folder()</font> and <font color='green'>T-Bill Term Structure: 9-15-2022.pdf</font> are assigned to the four keys, shown below.^{12}. If no values are assigned, the graph will not be saved.": [[0, "the-values-returned-by-create-path-folder-and-t-bill-term-structure-9-15-2022-pdf-are-assigned-to-the-four-keys-shown-below-12-if-no-values-are-assigned-the-graph-will-not-be-saved"]], "This arbitrage relationship is important for deriving the term of structure of interest rates and forward rates, which we\u2019ll examine later in this chapter. These concepts are key to understanding bond pricing as well as some important fixed-income derivatives.": [[0, "this-arbitrage-relationship-is-important-for-deriving-the-term-of-structure-of-interest-rates-and-forward-rates-which-we-ll-examine-later-in-this-chapter-these-concepts-are-key-to-understanding-bond-pricing-as-well-as-some-important-fixed-income-derivatives"]], "This chapter will introduce some fundamental principles of fixed income. These principles include pricing coupon bonds as a portfolio of zero-coupon bonds, the term structure of interest rates, and the relation between spot and forward rates of interest.": [[0, "this-chapter-will-introduce-some-fundamental-principles-of-fixed-income-these-principles-include-pricing-coupon-bonds-as-a-portfolio-of-zero-coupon-bonds-the-term-structure-of-interest-rates-and-the-relation-between-spot-and-forward-rates-of-interest"]], "This example outlines two Python concepts. First, it demonstrates how to leverage Pandas for accessing Excel workbooks from a URL and convert them into DataFrames\u2014a highly effective skill given Excel\u2019s widespread use.  The Pandas method is <font color='green'>read_excel</font>.^{9} Second, it illustrates data manipulation techniques using Pandas, specifically focusing on how <font color='green'>loc</font>, <font color='green'>iloc</font>, and <font color='green'>get_indexer</font> are used to retrieve data needed for calculations.^{10}": [[0, "this-example-outlines-two-python-concepts-first-it-demonstrates-how-to-leverage-pandas-for-accessing-excel-workbooks-from-a-url-and-convert-them-into-dataframesa-highly-effective-skill-given-excel-s-widespread-use-the-pandas-method-is-read-excel-9-second-it-illustrates-data-manipulation-techniques-using-pandas-specifically-focusing-on-how-loc-iloc-and-get-indexer-are-used-to-retrieve-data-needed-for-calculations-10"]], "This value is the same as the continuously-compounded forward rate of interest between t and  \\ t+\\Delta t.": [[0, "this-value-is-the-same-as-the-continuously-compounded-forward-rate-of-interest-between-t-and-t-delta-t"]], "Thus far, bond values have been represented as the sum of the zero-coupon bonds\u2019 values. But we must consider the zero-coupon bonds\u2019 market prices\u2014not their \u201ctheoretical\u201d values. Will the value relation between zero-coupon and coupon bonds hold if we use the market prices of zero-coupon bonds? To answer that question, let\u2019s look at examples where the coupon bond is worth more or less than the sum of the zero-coupon bonds. First, consider a case where the coupon bond\u2019s price exceeds the sum of the zero-coupon bond prices:": [[0, "thus-far-bond-values-have-been-represented-as-the-sum-of-the-zero-coupon-bonds-values-but-we-must-consider-the-zero-coupon-bonds-market-pricesnot-their-theoretical-values-will-the-value-relation-between-zero-coupon-and-coupon-bonds-hold-if-we-use-the-market-prices-of-zero-coupon-bonds-to-answer-that-question-let-s-look-at-examples-where-the-coupon-bond-is-worth-more-or-less-than-the-sum-of-the-zero-coupon-bonds-first-consider-a-case-where-the-coupon-bond-s-price-exceeds-the-sum-of-the-zero-coupon-bond-prices"]], "Treasury bill data is available from the US Department of the Treasury (Treasury) at the department\u2019s <a href='https://home.treasury.gov/resource-center/data-chart-center/interest-rates/TextView?type=daily_treasury_bill_rates&field_tdr_date_value_month=202509'>\u201dDaily Treasury Bill Rate\u201d</a> page. The data used in this example is for September 2022 and was uploaded to DropBox as an Excel workbook.": [[0, "treasury-bill-data-is-available-from-the-us-department-of-the-treasury-treasury-at-the-department-s-daily-treasury-bill-rate-page-the-data-used-in-this-example-is-for-september-2022-and-was-uploaded-to-dropbox-as-an-excel-workbook"]], "Treasury bills, or T-bills, mature in a year or less and make a single principal payment at maturity. In this section, we\u2019ll apply the Python concepts we\u2019ve learned so far to T-bill data, using the bills to demonstrate the term structure between one month and one year. Because the bills make a single payment, their prices are determined by the single spot rate of interest at maturity.": [[0, "treasury-bills-or-t-bills-mature-in-a-year-or-less-and-make-a-single-principal-payment-at-maturity-in-this-section-we-ll-apply-the-python-concepts-we-ve-learned-so-far-to-t-bill-data-using-the-bills-to-demonstrate-the-term-structure-between-one-month-and-one-year-because-the-bills-make-a-single-payment-their-prices-are-determined-by-the-single-spot-rate-of-interest-at-maturity"]], "Two-Dimensional Numpy Arrays": [[0, "two-dimensional-numpy-arrays"]], "Using Pandas and NumPy, the term structure of interest rates was calculated for September 15^{th} 2022, and September 30^{th} 2025. These term structures reveal an economy in transition. On September 15^{th} 2022, rates were increasing with maturity and expected to continue rising. By September 30^{th} 2025 the pattern had shifted. Although the overall level of rates was higher on September 30^{th} 2025, the term structure showed a slight downward slope. These differences indicate two different economic states: inflation was expected to increase in September 2022 but not  in September 2025. The ability to calibrate the term structure of interest rates in this way highlights the utility of Python and its rich ecosystem of libraries.": [[0, "using-pandas-and-numpy-the-term-structure-of-interest-rates-was-calculated-for-september-15-th-2022-and-september-30-th-2025-these-term-structures-reveal-an-economy-in-transition-on-september-15-th-2022-rates-were-increasing-with-maturity-and-expected-to-continue-rising-by-september-30-th-2025-the-pattern-had-shifted-although-the-overall-level-of-rates-was-higher-on-september-30-th-2025-the-term-structure-showed-a-slight-downward-slope-these-differences-indicate-two-different-economic-states-inflation-was-expected-to-increase-in-september-2022-but-not-in-september-2025-the-ability-to-calibrate-the-term-structure-of-interest-rates-in-this-way-highlights-the-utility-of-python-and-its-rich-ecosystem-of-libraries"]], "Using the CSV File to Calculate Term Structure": [[0, "using-the-csv-file-to-calculate-term-structure"]], "We define the sum  as:": [[0, "we-define-the-sum-as"]], "We suggest creating a main folder and subfolders on your local computer or Google Drive to store files (graphs, spreadsheets, and so forth) generated by the Notebooks in Basic Concepts of Fixed Income.": [[0, "we-suggest-creating-a-main-folder-and-subfolders-on-your-local-computer-or-google-drive-to-store-files-graphs-spreadsheets-and-so-forth-generated-by-the-notebooks-in-basic-concepts-of-fixed-income"]], "We\u2019ll then import two functions from the module: <font color='green'>parent_folder_subfolder</font> and <font color='green'>one_y_axis</font>. The former determines locations for saving and accessing files and can be <a href='https://patrickjhess.github.io/Imported-Functions/parent_folder_subfolder.html#parent-folder-subfolder-is-a-helper-function-for-saving-files-created-by-financial-python'>viewed here</a>. The latter plots calculation results and can be <a href='https://patrickjhess.github.io/Imported-Functions/one_y_axis.html#one-y-axis-is-a-helper-function-for-plotting-graphs-created-by-financial-python'>viewed here</a>.": [[0, "we-ll-then-import-two-functions-from-the-module-parent-folder-subfolder-and-one-y-axis-the-former-determines-locations-for-saving-and-accessing-files-and-can-be-viewed-here-the-latter-plots-calculation-results-and-can-be-viewed-here"]], "We\u2019ve now created a DataFrame, but we still need to access its contents. Three common ways of accessing the rows of a DataFrame are the attributes <font color='green'>loc</font> and <font color='green'>iloc</font> and the method <font color='green'>get_indexer()</font>.  All three ways access rows by the value of the index.": [[0, "we-ve-now-created-a-dataframe-but-we-still-need-to-access-its-contents-three-common-ways-of-accessing-the-rows-of-a-dataframe-are-the-attributes-loc-and-iloc-and-the-method-get-indexer-all-three-ways-access-rows-by-the-value-of-the-index"]], "With the data, we can return to calculating the Term Structure.  Recall that the price of a T-Bill (a zero-coupon bond) is its principal discounted back at the annualized continuous spot rate of interest. The forward rate of interest is the difference of the natural logs of the prices of a shorter maturity and a longer maturity zero-coupon bond. In order to calculate the term structure, we need to first calculate the prices of the T-Bills (the zero coupon prices).": [[0, "with-the-data-we-can-return-to-calculating-the-term-structure-recall-that-the-price-of-a-t-bill-a-zero-coupon-bond-is-its-principal-discounted-back-at-the-annualized-continuous-spot-rate-of-interest-the-forward-rate-of-interest-is-the-difference-of-the-natural-logs-of-the-prices-of-a-shorter-maturity-and-a-longer-maturity-zero-coupon-bond-in-order-to-calculate-the-term-structure-we-need-to-first-calculate-the-prices-of-the-t-bills-the-zero-coupon-prices"]], "You have the flexibility to choose the module name; in this instance, <font color='green'>module_basic_concepts_fixed_income</font> is assigned to <font color='green'>module_name</font>. Dropbox provides the URL for access. The module is instantiated with <font color='green'>ModuleType</font> (which we imported earlier) using the chosen <font color='green'>module_name</font>. Once created, the module becomes accessible in the Notebook\u2019s memory, though it is not added to a drive.": [[0, "you-have-the-flexibility-to-choose-the-module-name-in-this-instance-module-basic-concepts-fixed-income-is-assigned-to-module-name-dropbox-provides-the-url-for-access-the-module-is-instantiated-with-moduletype-which-we-imported-earlier-using-the-chosen-module-name-once-created-the-module-becomes-accessible-in-the-notebook-s-memory-though-it-is-not-added-to-a-drive"]], "and raising Euler\u2019s number, e, to both sides of the equation:": [[0, "and-raising-euler-s-number-e-to-both-sides-of-the-equation"]], "e is Euler\u2019s number and is the limit of (1+\\frac{1}{d})^{d} as d goes to infinity or continously compounds.The necessary condition is expressed as an annualized interest rate by taking the T root of both sides of the equation:": [[0, "e-is-euler-s-number-and-is-the-limit-of-1-frac-1-d-d-as-d-goes-to-infinity-or-continously-compounds-the-necessary-condition-is-expressed-as-an-annualized-interest-rate-by-taking-the-t-root-of-both-sides-of-the-equation"]], "one-y-axis is a helper function for plotting graphs created by Financial Python.": [[3, null]], "parent_folder_subfolder is a helper function for saving files created by Financial Python": [[4, null]], "r_t is known as the spot rate of interest for t periods.": [[0, "r-t-is-known-as-the-spot-rate-of-interest-for-t-periods"]], "where T is the number of days.  In the following code, the array <font color='green'>spot_rates</font> is calculated from the <font color='green'>zero_prices_one</font> array. The first five rows of the array are displayed below.": [[0, "where-t-is-the-number-of-days-in-the-following-code-the-array-spot-rates-is-calculated-from-the-zero-prices-one-array-the-first-five-rows-of-the-array-are-displayed-below"]], "where \\ T is the total number of cash flow periods, and \\ PV(t) is the present-value factor for a certain cash flow in period t.": [[0, "where-t-is-the-total-number-of-cash-flow-periods-and-pv-t-is-the-present-value-factor-for-a-certain-cash-flow-in-period-t"]]}, "docnames": ["Chapter_One_Some_Basic_Concepts_And_Term_Structure_Of_Interest_Rates", "imported_functions", "intro", "one_y_axis", "parent_folder_subfolder"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinxcontrib.bibtex": 9}, "filenames": ["Chapter_One_Some_Basic_Concepts_And_Term_Structure_Of_Interest_Rates.ipynb", "imported_functions.md", "intro.md", "one_y_axis.md", "parent_folder_subfolder.md"], "indexentries": {}, "objects": {}, "objnames": {}, "objtypes": {}, "terms": {"": [1, 2, 4], "0": 3, "00": 0, "001": 0, "01": 0, "02": 0, "0253719": 0, "0263878": 0, "02679418": 0, "02720058": 0, "02740378": 0, "03": 0, "030000": 0, "03008042": 0, "030386": 0, "03045453": 0, "030455": 0, "03120095": 0, "03130283": 0, "03278081": 0, "03318972": 0, "03349642": 0, "03359866": 0, "03397243": 0, "03397781": 0, "03438419": 0, "03449978": 0, "03460671": 0, "03471366": 0, "03478894": 0, "03481338": 0, "03499811": 0, "03530859": 0, "03540507": 0, "03602413": 0, "03617937": 0, "03620874": 0, "03633948": 0, "03644461": 0, "0364779": 0, "03654976": 0, "0365673": 0, "03677644": 0, "03688102": 0, "03706682": 0, "03716195": 0, "03742816": 0, "03767567": 0, "03771053": 0, "03775464": 0, "03779737": 0, "03793965": 0, "03807584": 0, "03817917": 0, "03827242": 0, "03828251": 0, "03838586": 0, "03869593": 0, "03873893": 0, "03887448": 0, "03896203": 0, "03907985": 0, "03910943": 0, "03918254": 0, "03921282": 0, "03928746": 0, "03932829": 0, "03935021": 0, "03939291": 0, "03943068": 0, "03962642": 0, "03963547": 0, "03986078": 0, "039879": 0, "04000335": 0, "04002581": 0, "04008989": 0, "04016638": 0, "04020678": 0, "04026888": 0, "04030802": 0, "0404102": 0, "04047821": 0, "04068225": 0, "04078428": 0, "04082219": 0, "04085421": 0, "04091826": 0, "0409422": 0, "04095608": 0, "04108155": 0, "04112731": 0, "04118718": 0, "04122902": 0, "04133073": 0, "04143244": 0, "04274794": 0, "04295028": 0, "04389543": 0, "04420214": 0, "04523591": 0, "04543804": 0, "04565418": 0, "05": 0, "050000": 0, "051271": 0, "0512711": 0, "06": 0, "07": 0, "070000": 0, "072508": 0, "07250818": 0, "08": 0, "1": [3, 4], "100": 2, "10i8yu4k0wsbx1d706ujt": 4, "12": 2, "14": 0, "16": 0, "18": 0, "19": 0, "2": 3, "20": 0, "2014": [], "2024": 2, "22": 0, "23": 0, "24": 0, "25": 0, "27": 0, "29": 0, "300": 3, "33": 0, "34": 0, "35": 0, "36": 0, "37": 0, "38": 0, "3824672720": 0, "404": 0, "42": 0, "43": 0, "44": 0, "46": 0, "47": 0, "48": 0, "49": 0, "4y5hjxlfphh1ngvbgo77q": 0, "50": 0, "51": 0, "53": 0, "54": 0, "55": 0, "57": 0, "58": 0, "59": 0, "60": 0, "61": 0, "63": 0, "64": 0, "65": 0, "67": 0, "69": 0, "6oxi7mgka42veaat79hcv8boz": 0, "70": 0, "72": 0, "73": 0, "74": 0, "75": 0, "76": 0, "77": 0, "78": 0, "79": 0, "792": 0, "80": 0, "81": 0, "82": 0, "83": 0, "84": 0, "85": 0, "86": 0, "87": 0, "88": 0, "89": 0, "9": 4, "90": 0, "91": 0, "92": 0, "93": 0, "93239382": 0, "932394": 0, "94": 0, "95": 0, "951229": 0, "95122942": 0, "95975778": 0, "95985889": 0, "96": 0, "96087": 0, "96147667": 0, "96157778": 0, "96420667": 0, "96430778": 0, "96440889": 0, "96471222": 0, "97": 0, "97044553": 0, "970446": 0, "98": 0, "980435": 0, "98063722": 0, "98068778": 0, "98089": 0, "98104167": 0, "98109222": 0, "98114278": 0, "98119333": 0, "98730667": 0, "98733972": 0, "98740583": 0, "99": 0, "99016694": 0, "9902175": 0, "99024278": 0, "99165833": 0, "99168361": 0, "99175944": 0, "99186056": 0, "99376222": 0, "99377778": 0, "99380889": 0, "99520889": 0, "99522444": 0, "99529833": 0, "99531": 0, "99534889": 0, "99539556": 0, "99682667": 0, "99683444": 0, "99684222": 0, "99685": 0, "99687333": 0, "9979": 0, "99791556": 0, "99794667": 0, "99797778": 0, "99805556": 0, "A": [2, 3, 4], "And": 2, "By": [2, 4], "For": 4, "If": [3, 4], "In": 4, "It": [1, 4], "No": [0, 4], "Not": 4, "Of": 2, "One": [1, 2], "The": [2, 3, 4], "Then": 0, "These": 1, "To": 4, "_": 0, "__dict__": 0, "__init__": 0, "_find_nb_path": 0, "_format": 0, "_get_kernel_id": 0, "about": [], "accept": 4, "acces": 2, "ad": 3, "add": 4, "address": 2, "after": 4, "alia": 0, "all": [3, 4], "allow": 2, "alpha": 3, "also": [], "alwai": 0, "an": [], "anaconda3": 0, "ani": 2, "appear": 0, "append": 0, "applic": [], "ar": [1, 2, 3, 4], "area": 3, "arg": [3, 4], "argument": 4, "arraai": 0, "arrai": [2, 3], "articl": 2, "assign": 4, "assum": 3, "auditori": [], "australia": [], "awai": 0, "axi": [1, 2], "b": 0, "background_materi": 0, "bad": 0, "bankers_discont": 0, "base": 4, "basic_concepts_fixed_incom": 0, "bbox_inch": 3, "behavior": 0, "being": [], "between": [3, 4], "beyond": 2, "bib": [], "bibliographi": [], "bibtex": [], "bill_data_excel": 0, "binari": 0, "binder": [1, 2], "blank": 4, "bond_t": 0, "book": [], "bool": 4, "both": 1, "bound": 0, "box": [], "break": 4, "brian": [], "brisban": [], "browser": 2, "buffer": 0, "build": [], "bypass": [], "calcul": 2, "call": [], "can": 3, "cell": 2, "center": 4, "chapter": [1, 2, 4], "chapter_on": 4, "charact": 4, "check": 0, "choic": 2, "christoph": [], "cite": [], "clean_nam": 4, "clean_name_list": 4, "click": 2, "close": 0, "cm": 3, "code": [1, 2], "cognit": [], "colab": [1, 2, 4], "colon": 4, "color": [3, 4], "colormap": 3, "com": [0, 4], "commonmark": [], "compon": 4, "confer": [], "configur": [3, 4], "connection_fil": 0, "contain": [3, 4], "content": 4, "copi": 2, "corner": 2, "cortex": [], "could": 0, "coupon_t": 0, "creation": 3, "current": [0, 2, 4], "cursor": [], "custom": 2, "cycl": 3, "data": [2, 3], "datafram": 2, "dataset": 3, "de": [], "def": [0, 3, 4], "default": [3, 4], "default_valu": 4, "default_value_fold": 4, "default_value_par": 4, "default_value_subfold": 4, "defin": [2, 3, 4], "depend": [], "design": 1, "desir": 0, "detect": 4, "deterim": 4, "determin": [3, 4], "dhc8art6": 4, "dict": [0, 3, 4], "dictionari": [3, 4], "differ": [], "directli": 2, "directori": 4, "displai": 4, "displayt": 0, "distingush": 4, "dl": [0, 4], "do": 3, "document": [], "download": [1, 2, 4], "dpi": 3, "drive": [2, 4], "dropbox": [1, 4], "dtype": 0, "e": [3, 4], "each": 3, "ecosystem": [], "effect": [1, 4], "either": 4, "elcj4gfnk4j94dqg2mremw7zr": 4, "els": [3, 4], "empti": 4, "end": 3, "enter": 4, "environ": 4, "evid": [], "exampl": [], "execut": 2, "exercis": 2, "exist": 0, "expect": [], "expir": 4, "express": 4, "extens": [], "extract": 0, "f": 4, "fallback": 4, "fals": 4, "feedback": 4, "fetch": [0, 4], "fi": [0, 4], "fig": 3, "figsiz": 3, "figur": 3, "figure_s": 3, "file": [1, 3], "file_graph": 3, "file_nam": 3, "filenotfounderror": 0, "fill": 3, "fill_between": 3, "fill_config": 3, "fill_funct": 3, "final": [3, 4], "financi": [1, 2], "find": 4, "first": [], "fix": 2, "flavor": [], "float64": 0, "flow_t": 0, "focu": 1, "folder": [3, 4], "folder_input": 4, "follow": [], "font": 4, "forc": 0, "format": [0, 4], "formula": 0, "found": [0, 4], "fourth": [], "from": [1, 2, 3, 4], "frontier": [], "full": 0, "full_path": 3, "function": 2, "g": [3, 4], "gener": [1, 3, 4], "get": [3, 4], "get_connection_fil": 0, "getcwd": 4, "ggplot": 3, "googl": [2, 4], "google_dict": 4, "graph": [1, 2], "green": 4, "ha": [], "half": 0, "handl": 3, "hardcod": 4, "have": 3, "hdhpk14": [], "header": 0, "heer": [], "height": [0, 3], "help": 1, "helper": 1, "here": [], "highlight": 2, "hint": 0, "holdgraf": [], "holdgraf_evidence_2014": [], "hover": 2, "http": 4, "human": [], "i": [1, 2], "icon": 2, "id": 4, "identifi": 3, "import": [2, 3, 4], "inch": 3, "includ": 2, "incom": 2, "index_col": 0, "indexerror": 0, "indic": 3, "individu": [], "inlin": [], "input": [3, 4], "insert": [], "inspect": 0, "intend": 1, "interact": [2, 4], "intern": [], "introduc": [], "ipykernel": 0, "ipykernel_11075": [], "ipykernel_11703": [], "ipykernel_11948": [], "ipykernel_18228": [], "ipykernel_28189": 0, "ipynb": [], "ipynbnam": [0, 4], "ipython": 4, "is_colab": 4, "isinst": 4, "iter": 3, "join": [3, 4], "json": 4, "jupyt": [1, 2, 4], "jupyterbook": [], "just": [], "kei": [3, 4], "kernel_id": 0, "kind": [], "knight": [], "lab": 1, "label": 3, "languag": [], "last": 0, "launch": [1, 2], "legend": [0, 3], "len": [3, 4], "length": 3, "lib": 0, "librari": [1, 4], "like": 3, "limit": [], "line": [], "linspac": 3, "list": 3, "live": [1, 2], "ll": [], "ln": 0, "load": [0, 4], "local": 4, "local_dict": 4, "local_nam": 4, "look": 4, "lookup": 4, "loop": 0, "lot": [], "lst": 3, "machin": 4, "mai": 4, "mani": [], "markdown": 4, "markedli": [], "marker": 3, "market": 2, "markup": [], "match": [3, 4], "materi": [], "matplotlib": [1, 3], "max": 0, "maximum": 3, "md": 4, "mechan": 0, "messag": 4, "minimum": [0, 3], "minut": 2, "mode": 0, "modul": [1, 2, 4], "module_": 0, "moreov": [], "most": [], "multipl": [1, 3], "multipleinstanceerror": 0, "must": 3, "mydriv": [0, 4], "n": 4, "name": [3, 4], "name_index_set": 0, "name_index_set_index": 0, "ne": [], "necessari": [2, 3, 4], "need": [], "nerror": 0, "neurosci": [], "new": [2, 4], "newli": 0, "non": 4, "nonalphanumer": 4, "none": [0, 3], "note": 4, "notebook": [1, 2, 4], "notebook_id": 4, "notebook_id_fold": 4, "notebook_nam": 4, "np": 3, "num_seri": 3, "number": 3, "numpi": [2, 3], "o": [3, 4], "off": [], "one": [1, 2], "one_y_axi": 3, "open": [0, 2, 4], "optim": 4, "option": [0, 2, 3, 4], "org": [], "other": 1, "out": 0, "over": 2, "overview": [], "own": 4, "packag": 0, "pad": 0, "page": [], "paramet": [0, 3], "parent": 4, "parent_directori": 4, "parent_directory_input": 4, "parent_folder_subfold": [1, 2], "pars": 4, "part": 1, "paslei": [], "pass": 4, "path": [3, 4], "pathvalid": 4, "pattern": 4, "pleas": 0, "plt": 3, "possibli": 0, "power": [], "predict": [], "press": 4, "presum": 0, "price": 2, "principal_t": 0, "print": [0, 4], "process": 4, "project": 4, "prompt": 4, "properli": 0, "provid": [2, 3, 4], "purepath": 0, "purpos": [], "py": 0, "pyplot": 3, "python": 2, "python3": 0, "qxoo8vpa4iziu5kvi27u6c41l": 0, "r": [0, 4], "rais": 3, "raise_for_statu": 0, "ramsai": [], "rang": [0, 3], "raw": 0, "re": 4, "read": 4, "recent": 0, "recogn": 0, "refer": [], "reformat": 4, "regular": 4, "remind": 0, "remot": 4, "render": [], "replac": 4, "request": 4, "requestexcept": 0, "requir": 2, "respons": [0, 4], "result": [], "return": [3, 4], "reveal": 2, "right": 2, "rlkei": [0, 4], "robert": [], "round": 0, "run": [1, 4], "runtimeerror": 0, "safeti": 4, "same": 3, "sanit": 4, "sanitize_filepath": 4, "save": [2, 3], "save_config": 3, "savefig": 3, "scl": [0, 4], "second": 4, "section": [], "see": [], "sept": 0, "septemb": 2, "seri": [1, 3], "series_label": 3, "serv": [], "server": 0, "set": 4, "setup": 3, "sever": 2, "shift": 1, "show": 3, "side": 4, "sign": 0, "similar": [], "simpl": [], "simpli": 2, "simultan": 2, "singl": [1, 3], "slight": [], "small": 0, "smart": 4, "sole": 4, "some": [], "sourc": 0, "span": [], "special": [], "specif": [], "specifi": 0, "sphinx": [], "split": [0, 4], "splitext": 0, "st": [0, 4], "stand": [], "standard": 4, "start": 3, "starter": [], "state": 2, "statu": 0, "stdin": 4, "stem": 0, "store": [], "str": [3, 4], "strip": [0, 4], "structur": 4, "stuou11h": 0, "style": 3, "sub": 4, "subfold": 4, "subfolder_input": 4, "suggest": 4, "sum_": 0, "support": 2, "suptitl": 3, "sy": 4, "syntax": [], "t": [], "tab": 2, "tbill_data": 0, "tbill_data_sit": 0, "ten": 4, "text": 0, "thei": [], "them": [], "thi": [1, 2, 4], "third": [], "those": [], "three": 2, "tight": 3, "tight_layout": 3, "titl": 3, "tmp": 0, "too": 0, "tool": [], "touch": 3, "traceback": 0, "track": 1, "trade": 0, "true": 4, "tupl": [0, 3, 4], "twelv": 0, "two": [1, 2, 3], "typic": 2, "uncertain": 0, "under": 2, "union": 0, "unpack": 4, "up": [2, 4], "upper": 2, "url": [2, 4], "us": [2, 3, 4], "user": [1, 2, 4], "util": 1, "valid": 3, "valu": [3, 4], "valueerror": 3, "variat": [], "verif": 0, "verifi": 0, "version": 2, "view": 2, "viridis_r": 3, "volum": [2, 4], "wai": [2, 4], "wait": 0, "wb": [0, 4], "wdb24k0dddkpq7qry5sl8": 0, "websit": 0, "well": 2, "wendi": [], "when": 4, "wherea": [], "whether": [], "width": [0, 3], "within": [1, 2, 4], "without": [2, 4], "word": 4, "work": 4, "write": [0, 4], "written": 0, "www": [0, 4], "x": 3, "x_data": 3, "xaxi": 0, "xlabel": [0, 3], "xlsx": 0, "y": [1, 2], "y1_index": 3, "y2_index": 3, "y_data_list": 3, "y_index": 3, "y_limit": 3, "ylabel": [0, 3], "ylim": [0, 3], "you": 4, "your": [], "z0": 4, "za": 4, "zip": 4}, "titles": ["<strong>Chapter One Notebook Of Basic Concepts Of Fixed Income</strong>", "Functions Imported By the Volume <em>Basic Concepts Of Fixed Income</em>", "Basic Bond Concepts and the Term Structure of Interest Rates", "one-y-axis is a helper function for plotting graphs created by <em>Financial Python</em>.", "parent_folder_subfolder is a helper function for saving files created by <em>Financial Python</em>"], "titleterms": {"": 0, "0": 0, "000": 0, "04": 0, "040": 0, "09": 0, "1": 0, "10": 0, "100": 0, "11": 0, "12": 0, "13": 0, "15": 0, "15th": 0, "17": 0, "2": 0, "2022": 0, "2024": 0, "2025": 0, "202509": 0, "21": 0, "26": 0, "28": 0, "3": 0, "30": 0, "31": 0, "360": 0, "365": 0, "4": 0, "40": 0, "45": 0, "5": 0, "52": 0, "6": 0, "68": 0, "7": 0, "8": 0, "9": 0, "9753": 0, "A": 0, "And": 0, "As": 0, "At": 0, "But": 0, "By": [0, 1], "For": 0, "If": 0, "In": 0, "It": 0, "Its": 0, "Not": 0, "Of": [0, 1], "On": 0, "One": 0, "The": 0, "There": 0, "These": 0, "To": 0, "Will": 0, "With": 0, "abil": 0, "abov": 0, "access": 0, "action": 0, "actual": 0, "ad": 0, "add": 0, "addit": 0, "address": 0, "adjac": 0, "after": 0, "alert": 0, "alias": 0, "all": 0, "allow": 0, "almost": 0, "along": 0, "alreadi": 0, "also": 0, "alter": 0, "although": 0, "amount": 0, "an": 0, "ani": 0, "annual": 0, "anoth": 0, "answer": 0, "appli": 0, "applic": 0, "approach": 0, "appropri": 0, "ar": 0, "arbitrag": 0, "argument": 0, "arrai": 0, "arrang": 0, "asid": 0, "aspect": 0, "assert": 0, "asset": 0, "assign": 0, "attempt": 0, "attent": 0, "attribut": 0, "automat": 0, "avail": 0, "avoid": 0, "axi": [0, 3], "back": 0, "bank": 0, "bank_discount": 0, "banker": 0, "bankers_discount": 0, "basic": [0, 1, 2], "becaus": 0, "becom": 0, "been": 0, "befor": 0, "begin": 0, "being": 0, "below": 0, "bet": 0, "between": 0, "bill": 0, "bit": 0, "block": 0, "blue": 0, "bond": [0, 2], "borrow": 0, "both": 0, "br": 0, "bracket": 0, "bui": 0, "builtin": 0, "calcul": 0, "calibr": 0, "call": 0, "can": 0, "cannot": 0, "case": 0, "cash": 0, "caus": 0, "cell": 0, "center": 0, "certain": 0, "chang": 0, "chapter": 0, "chart": 0, "choic": 0, "choos": 0, "chosen": 0, "citat": [], "click": 0, "code": 0, "colab": 0, "color": 0, "column": 0, "combin": 0, "common": 0, "complet": 0, "complex": 0, "compon": 0, "compos": 0, "compound": 0, "comprehens": 0, "comput": 0, "concept": [0, 1, 2], "conclud": 0, "condit": 0, "connect": 0, "consid": 0, "consol": 0, "construct": 0, "contain": 0, "content": 0, "contin": 0, "continu": 0, "conveni": 0, "convent": 0, "convers": 0, "convert": 0, "copi": 0, "correct": 0, "correspond": 0, "cost": 0, "could": [], "coupon": 0, "creat": [0, 3, 4], "create_path_fold": 0, "creation": 0, "critic": 0, "csv": 0, "curli": 0, "custom": 0, "d": 0, "dai": 0, "daili": 0, "daily_treasury_bill_r": 0, "data": 0, "data_d": 0, "datafram": 0, "dataset": 0, "date": 0, "datetim": 0, "default": 0, "defer": 0, "defin": 0, "delta": 0, "demonstr": 0, "depart": 0, "depend": 0, "deriv": 0, "descend": 0, "describ": 0, "desir": [], "desired_column": 0, "determin": 0, "df_bankers_discount": 0, "dictionari": 0, "diff": 0, "differ": 0, "difficult": 0, "digit": 0, "dimension": 0, "direct": 0, "directli": 0, "directori": 0, "discount": 0, "discret": 0, "discuss": 0, "displai": 0, "divid": 0, "do": 0, "doe": 0, "dollar": 0, "download": 0, "downward": 0, "draw": 0, "drawn": 0, "drive": 0, "dropbox": 0, "durat": 0, "e": 0, "each": 0, "earlier": 0, "earn": 0, "easi": 0, "econom": 0, "economi": 0, "ecosystem": 0, "eequival": 0, "effect": 0, "efficaci": 0, "effici": 0, "eight": 0, "either": 0, "element": 0, "enabl": 0, "encapsul": 0, "enclos": 0, "encount": 0, "end": 0, "engag": 0, "ensur": 0, "equal": 0, "equat": 0, "equilibrium": 0, "equival": 0, "error": 0, "essenti": 0, "euler": 0, "everi": 0, "examin": 0, "exampl": 0, "exce": 0, "excel": 0, "except": 0, "exclam": 0, "exec": 0, "execut": 0, "exercis": 0, "exp": 0, "expect": 0, "explan": 0, "explicit": 0, "explicitli": 0, "explor": 0, "express": 0, "extend": 0, "extens": 0, "extern": 0, "extra": 0, "ey": 0, "f": 0, "facilit": 0, "fact": 0, "factor": 0, "fail": 0, "fair": 0, "fals": 0, "far": 0, "faster": 0, "field_tdr_date_value_month": 0, "figur": 0, "file": [0, 4], "final": 0, "financ": 0, "financi": [0, 3, 4], "find": 0, "first": 0, "five": 0, "fix": [0, 1], "flexibl": 0, "flow": 0, "focu": 0, "focus": 0, "folder": 0, "follow": 0, "font": 0, "forecast": 0, "form": 0, "former": 0, "forth": 0, "forward": 0, "forward_r": 0, "four": 0, "frac": 0, "frequenc": 0, "from": 0, "function": [0, 1, 3, 4], "fundament": 0, "further": 0, "futur": 0, "gain": 0, "gener": 0, "get": 0, "get_index": 0, "github": 0, "given": 0, "go": 0, "goe": 0, "good": 0, "googl": 0, "gov": 0, "graph": [0, 3], "graphin": 0, "greatli": 0, "green": 0, "guess": 0, "ha": 0, "had": 0, "have": 0, "helper": [0, 3, 4], "here": 0, "higher": 0, "highli": 0, "highlight": 0, "hing": 0, "histor": 0, "hold": 0, "home": 0, "how": 0, "howev": 0, "href": 0, "html": 0, "http": 0, "i": [0, 3, 4], "idea": 0, "ident": 0, "ignor": 0, "illustr": 0, "iloc": 0, "imagin": 0, "immedi": 0, "impli": 0, "import": [0, 1], "inch": 0, "includ": 0, "incom": [0, 1], "increas": 0, "index": 0, "indic": 0, "indiffer": 0, "individu": 0, "inequ": 0, "infin": 0, "inflat": 0, "inplac": 0, "input": 0, "insert": 0, "insight": 0, "instal": 0, "instanc": 0, "instanti": 0, "instead": 0, "integ": 0, "intend": 0, "interact": 0, "interest": [0, 2], "interest_r": 0, "interrupt": 0, "introduc": 0, "introduct": 0, "invest": 0, "investor": 0, "io": 0, "isn": 0, "iter": 0, "its": 0, "jupyt": 0, "kei": 0, "know": 0, "knowledg": 0, "known": 0, "label": 0, "lack": 0, "lag": 0, "larg": 0, "later": 0, "latter": 0, "law": 0, "learn": 0, "leav": 0, "len": 0, "less": 0, "let": 0, "level": 0, "leverag": 0, "librari": 0, "like": 0, "limit": 0, "line": 0, "link": 0, "list": 0, "ll": 0, "loc": 0, "local": 0, "locat": 0, "lock": 0, "log": 0, "long": 0, "longer": 0, "look": 0, "loop": [], "lower": 0, "machin": 0, "magic": 0, "mai": 0, "main": 0, "make": 0, "manipul": 0, "map": 0, "mark": 0, "markdown": [], "marker": 0, "market": 0, "match": 0, "mathemat": 0, "matrix": 0, "matter": 0, "matur": 0, "maturity_dai": 0, "maximum": 0, "mean": 0, "measur": 0, "memori": 0, "messag": 0, "method": 0, "metric": 0, "might": 0, "minu": 0, "miss": 0, "mistak": 0, "model": 0, "modul": 0, "module_basic_concepts_fixed_incom": 0, "module_nam": 0, "moduletyp": 0, "month": 0, "more": 0, "most": 0, "move": 0, "much": 0, "multipli": 0, "must": 0, "myst": [], "name": 0, "nan": 0, "nanmax": 0, "natur": 0, "necessari": 0, "need": 0, "neg": 0, "new": 0, "next": 0, "note": 0, "notebook": 0, "notic": 0, "novemb": 0, "now": 0, "np": 0, "number": 0, "numer": 0, "numpi": 0, "o": 0, "object": 0, "observ": 0, "obviou": 0, "odd": 0, "offer": 0, "often": 0, "onc": 0, "one": [0, 3], "one_y_axi": 0, "onli": 0, "oper": 0, "order": 0, "organ": 0, "other": 0, "our": 0, "outlin": 0, "output": 0, "over": 0, "overal": 0, "own": 0, "p": 0, "page": 0, "pai": 0, "paid": 0, "panda": 0, "par": 0, "parent": 0, "parent_folder_subfold": [0, 4], "particular": 0, "pass": 0, "past": 0, "path": 0, "patrickjhess": 0, "pattern": 0, "payment": 0, "pd": 0, "pdf": 0, "per": 0, "percentag": 0, "perform": 0, "period": 0, "perman": 0, "pip": 0, "plot": [0, 3], "plu": 0, "pnanda": [], "point": 0, "portfolio": 0, "posit": 0, "power": 0, "practic": 0, "pre": 0, "prepar": 0, "present": 0, "presum": [], "prevent": 0, "previou": 0, "price": 0, "princip": 0, "principl": 0, "prior": 0, "proce": 0, "procedur": 0, "process": 0, "prompt": 0, "provid": 0, "purchas": 0, "put": 0, "pv": 0, "pv_factor": 0, "pv_rate": 0, "python": [0, 3, 4], "question": 0, "quick": 0, "quot": 0, "r_c": 0, "r_d": 0, "r_t": 0, "rais": 0, "rate": [0, 2], "rather": 0, "ratio": 0, "read": 0, "read_csv": 0, "read_excel": 0, "realiz": 0, "reason": 0, "recal": 0, "recreat": 0, "red": 0, "reflect": 0, "regard": 0, "relat": 0, "relationship": 0, "relev": 0, "remov": 0, "repai": 0, "repaid": 0, "repay": 0, "replic": 0, "repres": 0, "request": 0, "requir": 0, "resourc": 0, "respect": 0, "result": 0, "retriev": 0, "return": 0, "reveal": 0, "revers": 0, "review": 0, "rich": 0, "right": 0, "rise": 0, "road": 0, "role": [], "roll": 0, "root": 0, "row": 0, "rows_to_column": 0, "run": 0, "safe": 0, "same": 0, "sampl": [], "save": [0, 4], "save_config": 0, "screenshot": 0, "second": 0, "section": 0, "secur": 0, "see": 0, "seem": 0, "select": 0, "send": 0, "sens": 0, "separ": 0, "septemb": 0, "sequenc": 0, "seri": 0, "set": 0, "set_index": 0, "seven": 0, "shift": 0, "short": 0, "shorter": 0, "show": 0, "shown": 0, "side": 0, "signific": 0, "similar": 0, "simpl": 0, "simple_exampl": 0, "simplest": 0, "simpli": 0, "simplifi": 0, "sinc": 0, "singl": 0, "site": 0, "six": 0, "size": 0, "skill": 0, "slight": 0, "slope": 0, "so": 0, "some": 0, "specif": 0, "sport": 0, "spot": 0, "spot_rat": 0, "spreadsheet": 0, "squar": 0, "stand": 0, "standard": 0, "state": 0, "statement": 0, "step": 0, "still": 0, "sting": 0, "store": 0, "strang": 0, "string": 0, "string_dat": 0, "structur": [0, 2], "styliz": 0, "subfold": 0, "subtract": 0, "success": 0, "suggest": 0, "sum": 0, "summar": 0, "suppos": 0, "switch": 0, "sy": 0, "system": 0, "t": 0, "take": 0, "tall": 0, "task": 0, "tbill_data_excel": 0, "techniqu": 0, "term": [0, 2], "textview": 0, "th": 0, "than": 0, "thei": 0, "them": 0, "theoret": 0, "theori": 0, "therebi": 0, "thi": 0, "thirteen": 0, "those": 0, "though": 0, "thought": 0, "three": 0, "through": 0, "thu": 0, "tibil": 0, "time": 0, "titl": 0, "to_numpi": 0, "todai": 0, "tool": 0, "total": 0, "transit": 0, "transpos": 0, "treasuri": 0, "true": 0, "try": 0, "two": 0, "type": 0, "u": 0, "ubiquit": 0, "uncertain": [], "understand": 0, "unknown": 0, "unless": 0, "until": 0, "unworthi": 0, "up": 0, "upload": 0, "upon": 0, "upper": 0, "url": 0, "us": 0, "usabl": 0, "usag": 0, "user": 0, "util": 0, "valu": 0, "valuat": 0, "vari": 0, "variabl": 0, "variou": 0, "ve": 0, "versu": 0, "via": 0, "view": 0, "volum": [0, 1], "wa": 0, "wager": 0, "wai": 0, "warrant": 0, "we": 0, "week": 0, "well": 0, "were": 0, "what": 0, "whatev": 0, "when": 0, "where": 0, "which": 0, "who": 0, "why": 0, "wide": 0, "widespread": 0, "within": 0, "wonder": 0, "work": 0, "workbook": 0, "worth": 0, "x": 0, "y": [0, 3], "year": 0, "yield": 0, "you": 0, "your": 0, "zero": 0, "zero_price_on": 0, "zero_prices_on": 0}})